{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(unmarked)\nlibrary(ggplot2)\nlibrary(caret)\n\nsampling.cov2 <- read.csv(\"sampling.cov2.csv\")\nsampling.cov2<- sampling.cov2[,-1]\nsampling.cov2<- data.frame(sampling.cov2)\npreprocov <-preProcess(sampling.cov2[,1:8], method = c(\"center\",\"scale\"))\nsampling.cov2<-predict(preprocov, sampling.cov2[,1:8])\nDailycov3 <- read.csv(\"Dailycov3.csv\")\nDailycov3 <- Dailycov3 [,-1]\npreproDaily <-preProcess(Dailycov3[,], method = c(\"knnImpute\"))\nDailycov3<-predict(preproDaily, Dailycov3)\nJulian<-Dailycov3[,1:3]\nMax.hum<-Dailycov3[,4:6]\nMax.temp<-Dailycov3[,7:9]\nMean.hum<-Dailycov3[,10:12]\nMean.temp<-Dailycov3[,13:15]\nMin.hum<-Dailycov3[,16:18]\nMin.temp<-Dailycov3[,19:21]\nSd.hum<-Dailycov3[,22:24]\nSd.temp<-Dailycov3[,25:27]\nDailycov3<- list(Julian,Max.hum, Max.temp, Mean.hum,Mean.temp, Min.hum, Min.temp, Sd.hum, Sd.temp)\nnames(Dailycov3) <- c(\"Julian\", \"Maxhum\",\"Maxtemp\",\"Meanhum\", \"Meantemp\",\"Minhum\",\"Mintemp\",\"sdhum\",\"sdtemp\")\n\nBatOccu <- read.csv(\"BatOccu.csv\")\n\nlibrary(unmarked)\n\nBatOccuMyYu<-BatOccu[,2:4]\nSimOccuMyYu2<-unmarkedFrameOccu(y = BatOccuMyYu, siteCovs =sampling.cov2, obsCovs=Dailycov3)\nbest2.My.Yu2<-occu(formula = ~1 ~ Altitude + I(Altitude^2) + I(Burn.intensity.Canopy^2) + I(Distance.to.road^2) + Existing.vegetation + I(Existing.vegetation^2) + 1, data = SimOccuMyYu2)\n\nBatOccuMyCa<-BatOccu[,5:7]\nSimOccuMyCa2<-unmarkedFrameOccu(y = BatOccuMyCa, siteCovs =sampling.cov2, obsCovs=Dailycov3)\nbest2.My.Ca2<-occu(formula = ~Meanhum + 1 ~ Altitude + I(Altitude^2) + Distance.to.road + 1, data = SimOccuMyCa2)\n\nBatOccuMyCi<-BatOccu[,8:10]\nSimOccuMyCi2<-unmarkedFrameOccu(y = BatOccuMyCi, siteCovs =sampling.cov2, obsCovs=Dailycov3)\nbest2.My.Ci2<-occu(formula = ~1 ~ Altitude + Burn.intensity.Canopy + Distance.to.road + I(Distance.to.road^2) + 1, data = SimOccuMyCi2)\n\nBatOccuMyVo<-BatOccu[,11:13]\nSimOccuMyVo2<-unmarkedFrameOccu(y = BatOccuMyVo, siteCovs =sampling.cov2, obsCovs=Dailycov3)\nbest2.My.Vo2<-occu(formula = ~1 ~ Altitude + Burn.intensity.Canopy + I(Distance.to.road^2) +Distance.to.water + Existing.vegetation + 1, data = SimOccuMyVo2)\n\nBatOccuMyLu<-BatOccu[,14:16]\nSimOccuMyLu2<-unmarkedFrameOccu(y = BatOccuMyLu, siteCovs =sampling.cov2, obsCovs=Dailycov3)\nbest2.My.Lu2<-occu(formula = ~I(Julian^2) + Meanhum + Meantemp + 1 ~ Altitude + Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Distance.to.road + I(Distance.to.water^2) + 1, data = SimOccuMyLu2)\n\nshinyServer(function(input, output) {\n\n  output$distPlot <- renderPlot({\n\n    # generate the data\n    new.data<-c(input$Distance.to.water, input$Distance.to.road, 8.970, 14.97, input$Altitude, 1.4178, input$BC, 2.0149)\n    new.data<-data.frame(new.data)\n    new.data<-t(new.data)\n    new.data<-data.frame(new.data)\n    colnames(new.data)<- c(\"Distance.to.water\", \"Distance.to.road\", \"Existing.vegetation\", \"Fire.Interval\", \"Altitude\",\"Burn.intensity.soil\", \"Burn.intensity.Canopy\", \"Burn.intensity.basal\")\n    new.data<-predict(preprocov, new.data)\n    \n    pred.My.Ca <-predict(best2.My.Ca2, type = \"state\", new.data)$Predicted\n    SE.My.Ca <-predict(best2.My.Ca2, type = \"state\", new.data)$SE\n    pred.My.Yu <-predict(best2.My.Yu2, type = \"state\", new.data)$Predicted\n    SE.My.Yu <-predict(best2.My.Yu2, type = \"state\", new.data)$SE\n    pred.My.Ci <-predict(best2.My.Ci2, type = \"state\", new.data)$Predicted\n    SE.My.Ci <-predict(best2.My.Ci2, type = \"state\", new.data)$SE\n    pred.My.Vo <-predict(best2.My.Vo2, type = \"state\", new.data)$Predicted\n    SE.My.Vo <-predict(best2.My.Vo2, type = \"state\", new.data)$SE\n    pred.My.Lu <-predict(best2.My.Lu2, type = \"state\", new.data)$Predicted\n    SE.My.Lu <-predict(best2.My.Lu2, type = \"state\", new.data)$SE\n    Species <- c(\"Myca\", \"Myyu\", \"Myci\", \"Myvo\", \"Mylu\")\n    Prediction <- c(pred.My.Ca, pred.My.Yu, pred.My.Ci, pred.My.Vo, pred.My.Lu)\n    SE<-c(SE.My.Ca, SE.My.Yu, SE.My.Ci, SE.My.Vo, SE.My.Lu)\n    DF <-data.frame(cbind(Species, Prediction))\n\n    # plot occupancy\n    Bats.plot <- barplot(Prediction, ylim=c(0, 1.2), xlab=NULL, ylab=\"Occupancy\", main = \"Bat occupancy in Plumas\")\n    abline(h=1, lty=3)\n    axis(1, labels= c(\"Myca\", \"Myyu\", \"Myci\", \"Myvo\", \"Mylu\"), at = Bats.plot)\n    stDevs.t <- matrix(SE,length(SE))\n    segments(Bats.plot, Prediction - stDevs.t, Bats.plot, Prediction + stDevs.t, lwd=2)\n    segments(Bats.plot - 0.1, Prediction - stDevs.t, Bats.plot + 0.1, Prediction - stDevs.t, lwd=2)\n    segments(Bats.plot - 0.1, Prediction + stDevs.t, Bats.plot + 0.1, Prediction + stDevs.t, lwd=2)\n  })\n  output$visFun <- renderDataTable({\n    new.data<-c(input$Distance.to.water, input$Distance.to.road, 8.970, 14.97, input$Altitude, 1.4178, input$BC, 2.0149)\n    new.data<-data.frame(new.data)\n    new.data<-t(new.data)\n    new.data<-data.frame(new.data)\n    colnames(new.data)<- c(\"Distance.to.water\", \"Distance.to.road\", \"Existing.vegetation\", \"Fire.Interval\", \"Altitude\",\"Burn.intensity.soil\", \"Burn.intensity.Canopy\", \"Burn.intensity.basal\")\n    new.data<-predict(preprocov, new.data)\n    \n    pred.My.Ca <-predict(best2.My.Ca2, type = \"state\", new.data)$Predicted\n    pred.My.Yu <-predict(best2.My.Yu2, type = \"state\", new.data)$Predicted\n    pred.My.Ci <-predict(best2.My.Ci2, type = \"state\", new.data)$Predicted\n    pred.My.Vo <-predict(best2.My.Vo2, type = \"state\", new.data)$Predicted\n    pred.My.Lu <-predict(best2.My.Lu2, type = \"state\", new.data)$Predicted\n    Species <- c(\"Myca\", \"Myyu\", \"Myci\", \"Myvo\", \"Mylu\")\n    Prediction <- c(pred.My.Ca, pred.My.Yu, pred.My.Ci, pred.My.Vo, pred.My.Lu)\n    DF <-data.frame(t(Prediction))\n    colnames(DF) <- Species\n    DF\n    })\n})\n\n",
    "created" : 1449436303090.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3788993399",
    "id" : "1D566AA3",
    "lastKnownWriteTime" : 1449510936,
    "path" : "~/Documents/PlumasBatsApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}